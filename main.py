from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import asyncio
from aiogram.utils.keyboard import InlineKeyboardBuilder

from dbsettings import *



TOKEN = "8206501566:AAElICXCaVACUJSxOyQiYtskPgVCuvIJ8ew"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

bot = Bot(token=TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start(message: types.Message):
  await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≥–æ—Å–ø–æ–¥–∏–Ω. –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. üòäüëç")
  await message.answer_sticker('CAACAgIAAxkBAAEBetpog_BZgfckilNf3NpYUmmN4-RmCQACZRUAAujW4hK1-GT64wxohzYE')

  kb = [
        [types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ –¥–µ–ª")],
        [types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")],
        [types.KeyboardButton(text="–ó–∞–º–µ—Ç–∫–∏")]

  ]
  keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
  await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:', reply_markup=keyboard)
  

def tasks_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="task_add"),
            types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="task_del"),
        ],
        [
            types.InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="task_delall"),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="task_update"),
         
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def delall_keyboard():
  buttons = [
    [
        types.InlineKeyboardButton(text="–î–∞", callback_data="task_yes"),
        types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="task_no"),
    ]
  ]
  keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
  return keyboard


add_task_flag = False
del_task_flag = False
delall_task_flag_q = False
delall_task_flag = False
update_task_flag = False

@dp.message(F.text)
async def message_handler(message: types.Message):
  user_message = message.text

  global add_task_flag 
  global del_task_flag
  global update_task_flag
  global delall_task_flag
  global delall_task_flag_q 

  if user_message=='–°–ø–∏—Å–æ–∫ –¥–µ–ª':
    await message.answer('–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–µ–ª:')
    print(show_tasks())
    await message.answer(show_tasks(), reply_markup=tasks_keyboard())
    # await message.answer_sticker('CAACAgIAAxkBAAEBeuFohDr4GbtTpzyFs32Vib9_BA9-_gACbBUAAujW4hL2f3MiSHgDODYE')
  elif user_message=='–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤':
    pass
  elif user_message=='–ó–∞–º–µ—Ç–∫–∏':
     pass
  else:
    if add_task_flag:
      add_task(user_message)
      await message.answer('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
      await message.answer(show_tasks(), reply_markup=tasks_keyboard())
      add_task_flag = False
    elif del_task_flag:
      try:
        if user_message in show_tasks_ids():
          delete_task(user_message)
          await message.answer(f'–ó–∞–¥–∞—á–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {user_message} —É–¥–∞–ª–µ–Ω–∞')
          del_task_flag = False
          await message.answer(show_tasks(), reply_markup=tasks_keyboard())
        else:
          await message.answer('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç')
      except Exception:
         await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏.')
         await message.answer(show_tasks(), reply_markup=tasks_keyboard())
    elif update_task_flag:
      if ' ' not in user_message:
        await message.answer('–ú–µ–∂–¥—É –Ω–æ–º–µ—Ä–æ–º –∏ –∑–∞–¥–∞—á–µ–∏ÃÜ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–±–µ–ª.')
        await message.answer(show_tasks(), reply_markup=tasks_keyboard())
      else:
        updating_text = user_message.split()
        updated_text_id = updating_text[0]
        updating_text_task = updating_text[1::]

        updated_text_task = ''
        for i in updating_text_task:
          updated_text_task+=i+' '
        if updated_text_id in show_tasks_ids():
          update_task(updated_text_id, updated_text_task)
          await message.answer(f'–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {updated_text_id} –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞')
          update_task_flag=False
          await message.answer(show_tasks(), reply_markup=tasks_keyboard())
        else:
          await message.answer('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç. –í—ã —á–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ö–æ—Ç–∏—Ç–µ —Ç–æ')
          await message.answer(show_tasks(), reply_markup=tasks_keyboard())
    else:
      await message.answer('–ù–µ –ø–æ–Ω—è–ª –∑–∞—á–µ–º –≤—ã —ç—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é')
    

@dp.callback_query(F.data.startswith("task_"))
async def callbacks(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    print(action)
    global update_task_flag
    global add_task_flag
    global del_task_flag
    global delall_task_flag
    global delall_task_flag_q

    if action == "add":
        add_task_flag = True
        await callback.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –∑–¥–∞—á—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")

    elif action == "del":
        del_task_flag = True
        await callback.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    elif action == "delall":
        delall_task_flag_q = True
        await callback.message.answer(f"–í—ã –¥–µ–∏ÃÜ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª?", reply_markup=delall_keyboard())
    elif action == 'update':
        update_task_flag = True
        await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    elif action == 'yes':
        delall_task_flag = True
        delete_all_tasks()
        await callback.message.answer('–í–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª –æ—á–∏—â–µ–Ω')
        await callback.message.answer(show_tasks())
    elif action == 'no':
        delall_task_flag = False
        await callback.message.answer('–ù—É –Ω–µ—Ç —Ç–∞–∫ –Ω–µ—Ç')
        await callback.message.answer(show_tasks())

    
    
       


 # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
     await dp.start_polling(bot)

if __name__ == "__main__":
   asyncio.run(main())
